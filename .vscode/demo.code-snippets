{
  "Http Scripts": {
    "prefix": "hello",
    "scope": "http",
    "body": [
      "GET http://localhost:7071/api/Hello HTTP/1.1",
      "",
      "###",
      "",
      "GET http://localhost:7071/api/Hello?name=Tom HTTP/1.1",
      "",
      "###",
      "",
      "POST http://localhost:7071/api/Hello HTTP/1.1",
      "content-type: application/json",
      "",
      "{",
      "  \"name\": \"Jesse Ventura\"",
      "}"
    ]
  },
  "Image Received": {
    "prefix": "imgr",
    "body": [
      "using System;",
      "using Microsoft.Azure.WebJobs;",
      "using Microsoft.Azure.EventGrid.Models;",
      "using Microsoft.Azure.WebJobs.Extensions.EventGrid;",
      "using Microsoft.Extensions.Logging;",
      "using Microsoft.Azure.WebJobs.Extensions.DurableTask;",
      "using System.Threading.Tasks;",
      "using Live360.Demo.Models;",
      "using Live360.Demo.Orchestration;",
      "using Newtonsoft.Json;",
      "",
      "namespace Live360.Demo",
      "{",
      "    public static class ImageReceived",
      "    {",
      "        [FunctionName(nameof(ImageReceived))]",
      "        public static async Task Run(",
      "            [EventGridTrigger] ",
      "            EventGridEvent eventGridEvent,",
      "            [DurableClient] IDurableOrchestrationClient starter,",
      "            ILogger log)",
      "        {",
      "            dynamic data = eventGridEvent.Data;",
      "",
      "            var uri = new Uri((string)data.url);",
      "            var fileName = uri.PathAndQuery.Split('/')[2];",
      "",
      "            // Function input comes from the request content.",
      "            var info = new ReceivedImageInfo",
      "            {",
      "                Id = eventGridEvent.Id,",
      "                FileName = fileName",
      "            };",
      "",
      "            string instanceId = await starter.StartNewAsync(nameof(ImageOrchestrator), info);",
      "",
      "            log.LogInformation(\"Started orchestratio for Image: {Image} with Orch ID: '{OrchestrationId}'.\", ",
      "                JsonConvert.SerializeObject(info), instanceId);",
      "        }",
      "    }",
      "}",
      ""
    ],
    "description": "Image Received"
  },
  "Durable Function Activity": {
    "prefix": "act1",
    "scope": "csharp",
    "body": [
      "using Live360.Demo.Models;",
      "using Microsoft.Azure.WebJobs;",
      "using Microsoft.Azure.WebJobs.Extensions.DurableTask;",
      "using Microsoft.Extensions.Logging;",
      "using Newtonsoft.Json;",
      "",
      "namespace Live360.Demo.Orchestration",
      "{",
      "    public static class SaveReceivedImage",
      "    {",
      "        /// <summary>",
      "        /// Save received image info to cosmos",
      "        /// </summary>",
      "        /// <param name=\"inputs\">the input to the operation</param>",
      "        /// <param name=\"logger\">the logger</param>",
      "        [FunctionName(nameof(SaveReceivedImage))]",
      "        public static void Run(",
      "          [ActivityTrigger] ReceivedImageInfo input,",
      "          [CosmosDB(",
      "            databaseName: \"images\",",
      "            collectionName: \"received\",",
      "            ConnectionStringSetting = \"CosmosConnectionString\")]",
      "          out ReceivedImageInfo model,",
      "          ILogger logger)",
      "        {",
      "            logger.LogInformation(\"Saving Image: {Image}\", JsonConvert.SerializeObject(input));",
      "            model = input;",
      "        }",
      "    }",
      "}"
    ]
  },
  "Find Face Count": {
    "prefix": "act2",
    "scope": "csharp",
    "body": [
      "using System;",
      "using System.Threading;",
      "using Live360.Demo.Models;",
      "using Microsoft.Azure.WebJobs;",
      "using Microsoft.Azure.WebJobs.Extensions.DurableTask;",
      "using Microsoft.Extensions.Logging;",
      "using Newtonsoft.Json;",
      "",
      "namespace Live360.Demo.Orchestration",
      "{",
      "  public static class FindFaceCount",
      "  {",
      "    /// <summary>",
      "    /// Finds the face count in an image",
      "    /// </summary>",
      "    /// <param name=\"inputs\">the input to the operation</param>",
      "    /// <param name=\"logger\">the logger</param>",
      "    /// <returns>the count of detected faces</returns>",
      "    [FunctionName(nameof(FindFaceCount))]",
      "    public static int Run(",
      "      [ActivityTrigger] ReceivedImageInfo input,",
      "      ILogger logger)",
      "    {",
      "        // Take up some memory",
      "        var bytes = new byte[30_000_000];",
      "",
      "        logger.LogInformation(\"Finding Face Count For Image: {Image}\", JsonConvert.SerializeObject(input));",
      "        ",
      "        // Simulate retrieving and processing the image",
      "        Thread.Sleep(Random.Shared.Next(10_000, 30_000));",
      "",
      "        // fake results",
      "        var faceCount = Random.Shared.Next(0, 5);",
      "        return faceCount;",
      "    }",
      "  }",
      "}"
    ]
  },
  "Send Notifications": {
    "prefix": "act3",
    "body": [
      "using Live360.Demo.Models;",
      "using Microsoft.Azure.WebJobs;",
      "using Microsoft.Azure.WebJobs.Extensions.DurableTask;",
      "using Microsoft.Extensions.Logging;",
      "using Newtonsoft.Json;",
      "",
      "namespace Live360.Demo.Orchestration",
      "{",
      "  public static class SendNotifications",
      "  {",
      "    /// <summary>",
      "    /// Send notifications about the results",
      "    /// </summary>",
      "    /// <param name=\"inputs\">the input to the operation</param>",
      "    /// <param name=\"logger\">the logger</param>",
      "    [FunctionName(nameof(SendNotifications))]",
      "    public static void Run(",
      "      [ActivityTrigger] ReceivedImageInfo input,",
      "      ILogger logger)",
      "    {",
      "        // TODO: Send Notification",
      "",
      "        logger.LogInformation(\"Sending Notification for Image: {Image}\", JsonConvert.SerializeObject(input));",
      "    }",
      "  }",
      "}"
    ]
  },
  "The Orchestrator": {
    "prefix": "orch",
    "scope": "csharp",
    "body": [
      "using System.Threading.Tasks;",
      "using Live360.Demo.Models;",
      "using Microsoft.Azure.WebJobs;",
      "using Microsoft.Azure.WebJobs.Extensions.DurableTask;",
      "using Microsoft.Extensions.Logging;",
      "using Newtonsoft.Json;",
      "",
      "namespace Live360.Demo.Orchestration",
      "{",
      "    public static class ImageOrchestrator",
      "    {",
      "        [FunctionName(nameof(ImageOrchestrator))]",
      "        public static async Task RunOrchestrator(",
      "            [OrchestrationTrigger] IDurableOrchestrationContext context,",
      "            ILogger logger)",
      "        {",
      "            var imageInfo = context.GetInput<ReceivedImageInfo>();",
      "",
      "            var log = context.CreateReplaySafeLogger(logger);",
      "            log.LogInformation(\"Begin Orchestration for Image: {Image}\", JsonConvert.SerializeObject(imageInfo));",
      "",
      "            // 1) Save Input Data to Cosmos",
      "            log.LogTrace(\"Calling Save Activity for {Image}\", JsonConvert.SerializeObject(imageInfo));",
      "            await context.CallActivityAsync(nameof(SaveReceivedImage), imageInfo);",
      "",
      "            // 2) Find Faces",
      "            log.LogTrace(\"Calling Find Face Activity for {Image}\", JsonConvert.SerializeObject(imageInfo));",
      "            imageInfo.FaceCount = await context.CallActivityAsync<int>(nameof(FindFaceCount), imageInfo);",
      "",
      "            // 3) Save the results - SAME METHOD",
      "            log.LogTrace(\"Calling Save Activity for {Image}\", JsonConvert.SerializeObject(imageInfo));",
      "            await context.CallActivityAsync(nameof(SaveReceivedImage), imageInfo);",
      "",
      "            // 4) Send notifications",
      "            log.LogTrace(\"Calling Send Notifications for {Image}\", JsonConvert.SerializeObject(imageInfo));",
      "            await context.CallActivityAsync(nameof(SendNotifications), imageInfo);",
      "",
      "            log.LogDebug(\"Orchestration Done for {Image}\", JsonConvert.SerializeObject(imageInfo));",
      "        }",
      "    }",
      "}"
    ]
  },
  "The Model": {
    "prefix": "mod",
    "body": [
      "using Newtonsoft.Json;",
      "",
      "namespace Live360.Demo.Models",
      "{",
      "    public class ReceivedImageInfo",
      "    {",
      "        [JsonProperty(\"id\")]",
      "        public string Id { get; set; }",
      "",
      "        [JsonProperty(\"fileName\")]",
      "        public string FileName { get; set; }",
      "",
      "        [JsonProperty(\"faceCount\")]",
      "        public int? FaceCount { get; set; }",
      "    }",
      "}"
    ]
  },
  "Random Exception Throw": {
    "prefix": "randex",
    "scope": "csharp",
    "body": "if (Random.Shared.Next(10) == 0) throw new Exception(\"Buggy Library Exception\");"
  },
  "Send Notification Snippet": {
    "prefix": "send",
    "scope": "csharp",
    "body": [
      "// pretend 'Hello' is an external notification API call",
      "var hostname = Environment.GetEnvironmentVariable(\"WEBSITE_HOSTNAME\");",
      "await httpClient.GetAsync($\"https://{hostname}/api/Hello\");"
    ]
  },
  "host.json file": {
    "prefix": "host",
    "scope": "json",
    "body": [
      "{",
      "  \"version\": \"2.0\",",
      "  \"extensions\": {",
      "    \"durableTask\": {",
      "      // configure distributed tracing for durable functions",
      "      \"tracing\": {",
      "        \"distributedTracingEnabled\": true,",
      "        \"distributedTracingProtocol\": \"W3CTraceContext\"",
      "      }",
      "    }",
      "  },",
      "",
      "  \"logging\": {",
      "    \"applicationInsights\": {",
      "      \"samplingSettings\": {",
      "        \"isEnabled\": false // Stop sampling so we get everything - probably not good all the time",
      "        // typically you want this enabled and have the exclusions for things you don't want to miss",
      "        // \"excludedTypes\": \"Request;Exception\"",
      "      },",
      "      \"httpAutoCollectionOptions\": {",
      "        // enable W3C standard distributed tracing in App Insights",
      "        \"enableW3CDistributedTracing\": true",
      "      }",
      "    },",
      "    \"logLevel\": {",
      "      // add some default log levels",
      "      \"default\": \"Information\",",
      "      \"DurableTask.AzureStorage\": \"Error\",",
      "      \"Host.Results\": \"Error\",",
      "      \"Function\": \"Debug\"",
      "    }",
      "  }",
      "}",
      ""
    ],
    "description": "host.json file"
  },
  "OrchTest": {
    "prefix": "orch",
    "scope": "http",
    "body": "###\n\nGET http://localhost:7071/api/OrchTest_HttpStart HTTP/1.1\n\n###"
  },
  "Blob Binding": {
    "prefix": "blob",
    "scope": "csharp",
    "body": "[Blob(\"images/{data.FileName}\", FileAccess.Read, Connection=\"ImagesBlobStorage\")] Stream imgStream,"
  },
  "blob storage setting": {
    "prefix": "blobsetting",
    "scope": "json",
    "body": "\"ImagesBlobStorage__blobServiceUri\": \"https://STORAGE_ACCOUNT.blob.core.windows.net\""
  },
  "Add OpenApiKey setting": {
    "prefix": "oak",
    "scope": "csharp",
    "body": "[OpenApiSecurity(\"function_key\", SecuritySchemeType.ApiKey, Name = \"code\", In = OpenApiSecurityLocationType.Query)]"
  }
}